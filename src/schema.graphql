type JWT @jwt {
  roles: [String!]!
  id: String
  sub: String
}
type User
  @authentication(
    operations: [
      UPDATE
      DELETE
      CREATE
      CREATE_RELATIONSHIP
      DELETE_RELATIONSHIP
      SUBSCRIBE
    ]
    jwt: { roles_INCLUDES: "overlord" }
  ) {
  firstName: String!
  lastName: String!
  fullName: String! @customResolver(requires: "firstName lastName")
  userId: String! @unique
  adminAccess: [Tenant!]! @relationship(type: "ADMIN_IN", direction: OUT)
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [CREATE, UPDATE])
  updatedBy: String
    @populatedBy(callback: "getUserIDFromContext", operations: [CREATE, UPDATE])
}

type Tenant
  @authentication(
    operations: [
      UPDATE
      DELETE
      CREATE
      CREATE_RELATIONSHIP
      DELETE_RELATIONSHIP
      SUBSCRIBE
    ]
    jwt: { roles_INCLUDES: "overlord" }
  ) {
  id: ID! @id
  admins: [User!]! @relationship(type: "ADMIN_IN", direction: IN)
  garages: [Garage!]! @relationship(type: "TENANT_HAS_GARAGE", direction: IN)
  vehiclecards: [VehicleCard!]!
    @relationship(type: "VEHICLECARD_OWNER", direction: IN)
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [CREATE, UPDATE])
  updatedBy: String
    @populatedBy(callback: "getUserIDFromContext", operations: [CREATE, UPDATE])
}

type Garage
  @authentication(
    operations: [
      UPDATE
      DELETE
      CREATE
      CREATE_RELATIONSHIP
      DELETE_RELATIONSHIP
      SUBSCRIBE
    ]
    jwt: { roles_INCLUDES: "overlord" }
  ) {
  id: ID! @id
  tenant: Tenant! @relationship(type: "TENANT_HAS_GARAGE", direction: OUT)
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [CREATE, UPDATE])
  updatedBy: String
    @populatedBy(callback: "getUserIDFromContext", operations: [CREATE, UPDATE])
}

type VehicleCard
  @authentication(
    operations: [
      UPDATE
      DELETE
      CREATE
      CREATE_RELATIONSHIP
      DELETE_RELATIONSHIP
      SUBSCRIBE
    ]
    jwt: { roles_INCLUDES: "overlord" }
  ) {
  id: ID! @id
  tenant: Tenant! @relationship(type: "VEHICLECARD_OWNER", direction: OUT) # <---  this line
  garages: [Garage!]! @relationship(type: "VALID_GARAGES", direction: OUT)
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [CREATE, UPDATE])
  updatedBy: String
    @populatedBy(callback: "getUserIDFromContext", operations: [CREATE, UPDATE])
}

extend schema @authentication @query(read: true, aggregate: false)
